import {createAsyncThunk, createSlice} from '@reduxjs/toolkit';
import AsyncStorage from '@react-native-async-storage/async-storage';
// import { removeToken } from "../../actions/generalActions";
import {setEnrolled} from './programReducer';

// Define an async thunk for the logout operation
export const logout = createAsyncThunk('auth/logout', async (_, {dispatch}) => {
  await AsyncStorage.removeItem('user_token');
  // removeToken(); // Assuming this is a synchronous operation
  dispatch(logoutSuccess());
  dispatch(setEnrolled(''));
});

const initialState = {
  user: {},
  isAuthenticated: false,
  enrollment: null,
  myEnrollments: [],
};

const authSlice = createSlice({
  name: 'auth',
  initialState,
  reducers: {
    setUser: (state, action) => {
      state.user = action.payload;
      state.isAuthenticated = true;
    },
    updateUser: (state, action) => {
      state.user = {...state.user, ...action.payload};
    },
    setEnrollment: (state, action) => {
      state.enrollment = action.payload;
    },
    setMyEnrollments: (state, action) => {
      state.myEnrollments = action.payload;
    },
    logoutSuccess: state => {
      state.user = {};
      state.isAuthenticated = false;
    },
  },
  // No extraReducers needed if logout logic is moved to a middleware or side-effect handler
});

// Export actions generated by createSlice
export const {
  setUser,
  updateUser,
  setEnrollment,
  setMyEnrollments,
  logoutSuccess, // Rename to indicate this is the success action
} = authSlice.actions;

// Export the reducer
export default authSlice.reducer;
